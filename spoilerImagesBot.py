import logging
import asyncio
import os
from telegram import Update
from telegram.ext import filters, MessageHandler, ApplicationBuilder, ContextTypes, CallbackContext, CommandHandler
from telegram import Update, InputMediaAnimation, InputMediaVideo, InputMediaPhoto

logging.basicConfig(
  format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
  level=logging.WARNING
)

# Load configuration from environment variables
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")
if not CHAT_ID:
    raise ValueError("CHAT_ID environment variable is required")

try:
    chat_id = int(CHAT_ID)
except ValueError:
    raise ValueError("CHAT_ID must be a valid integer")

media_groups = {}

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /start command"""
    if update.effective_chat.type == 'private':
        welcome_message = (
            "ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π!*\n\n"
            "üìù *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞–Ω–∏–º–∞—Ü–∏–∏)\n"
            "‚Ä¢ –Ø –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∫–∞–∫ —Å–ø–æ–π–ª–µ—Ä\n"
            "‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã - –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, –∫—Ç–æ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∏–ª\n\n"
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:*\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—ã –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
            "‚Ä¢ –í–∞—à–∞ –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–∞\n"
            "‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        )
        await update.message.reply_text(welcome_message, parse_mode='MarkdownV2')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /help command"""
    if update.effective_chat.type == 'private':
        help_message = (
            "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
            "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:*\n"
            "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "‚Ä¢ üé• –í–∏–¥–µ–æ\n"
            "‚Ä¢ üé≠ –ê–Ω–∏–º–∞—Ü–∏–∏/GIF\n"
            "‚Ä¢ üìé –ì—Ä—É–ø–ø—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤\n\n"
            "*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ —Å–ø–æ–π–ª–µ—Ä—ã\n"
            "‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n"
            "‚Ä¢ –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start \\- –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "/help \\- –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ\\!"
        )
        await update.message.reply_text(help_message, parse_mode='MarkdownV2')

async def echo_media_group(context: CallbackContext, media_group_id):
  response = []
  for message in media_groups[media_group_id]:
    if message.photo:
      response.append(InputMediaPhoto(media=message.photo[-1].file_id, has_spoiler=True))
    elif message.video:
      response.append(InputMediaVideo(media=message.video.file_id, has_spoiler=True))
    elif message.animation:   # Check if the media is an animation/GIF file.
      response.append(InputMediaAnimation(media=message.animation.file_id, has_spoiler=True))
  await context.bot.send_media_group(chat_id=chat_id, media=response)
  
  # Reply to the user to confirm delivery
  original_message = media_groups[media_group_id][0]  # Get the first message from the group
  await context.bot.send_message(
    chat_id=original_message.chat_id,
    text="–ø–µ—Ä–µ—Å–ª–∞–ª",
    reply_to_message_id=original_message.message_id
  )
  
  del media_groups[media_group_id]

async def media(update: Update, context: ContextTypes.DEFAULT_TYPE):
  if update.message is not None:
    message = update.message
    media_group_id = message.media_group_id
    if update.effective_chat.type == 'private':
      if media_group_id:
        if media_group_id not in media_groups:
          media_groups[media_group_id] = [message]
          asyncio.get_event_loop().call_later(1.0, lambda: asyncio.create_task(echo_media_group(context, media_group_id)))
        else:
          media_groups[media_group_id].append(message)
      else:
        if message.photo:
          await context.bot.send_photo(chat_id=chat_id, photo=message.photo[-1], has_spoiler=True)
          await message.reply_text("–ø–µ—Ä–µ—Å–ª–∞–ª")
        elif message.video:
          await context.bot.send_video(chat_id=chat_id, video=message.video, has_spoiler=True)
          await message.reply_text("–ø–µ—Ä–µ—Å–ª–∞–ª")
        elif message.animation:
          await context.bot.send_animation(chat_id=chat_id, animation=message.animation.file_id, has_spoiler=True)
          await message.reply_text("–ø–µ—Ä–µ—Å–ª–∞–ª")

async def text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
  if update.message is not None and update.effective_chat.type == 'private':
    message = update.message
    if message.text:
      # Wrap the text in spoiler formatting using MarkdownV2 syntax
      spoiler_text = f"||{message.text}||"
      await context.bot.send_message(
        chat_id=chat_id, 
        text=spoiler_text, 
        parse_mode='MarkdownV2'
      )
      await message.reply_text("–ø–µ—Ä–µ—Å–ª–∞–ª")

if __name__ == '__main__':
  application = ApplicationBuilder().token(BOT_TOKEN).build()
  
  # Command handlers
  application.add_handler(CommandHandler("start", start_command))
  application.add_handler(CommandHandler("help", help_command))
  
  # Handler for media (photos, videos, animations)
  media_handler = MessageHandler(filters.ANIMATION | filters.PHOTO | filters.VIDEO, media)
  application.add_handler(media_handler)
  
  # Handler for text messages
  text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, text_message)
  application.add_handler(text_handler)
  
  application.run_polling()